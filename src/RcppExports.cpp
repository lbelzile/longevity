// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// turnbull_intervals
arma::mat turnbull_intervals(arma::vec Lset, arma::vec Rset);
RcppExport SEXP _longevity_turnbull_intervals(SEXP LsetSEXP, SEXP RsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Lset(LsetSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Rset(RsetSEXP);
    rcpp_result_gen = Rcpp::wrap(turnbull_intervals(Lset, Rset));
    return rcpp_result_gen;
END_RCPP
}
// censTruncLimits
Rcpp::List censTruncLimits(arma::mat tsets, int n, arma::vec lcens, arma::vec rcens, arma::vec ltrunc, arma::vec rtrunc, bool trunc);
RcppExport SEXP _longevity_censTruncLimits(SEXP tsetsSEXP, SEXP nSEXP, SEXP lcensSEXP, SEXP rcensSEXP, SEXP ltruncSEXP, SEXP rtruncSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tsets(tsetsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lcens(lcensSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ltrunc(ltruncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rtrunc(rtruncSEXP);
    Rcpp::traits::input_parameter< bool >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(censTruncLimits(tsets, n, lcens, rcens, ltrunc, rtrunc, trunc));
    return rcpp_result_gen;
END_RCPP
}
// turnbullem
Rcpp::List turnbullem(arma::mat tsets, int n, arma::vec lcens, arma::vec rcens, arma::vec ltrunc, arma::vec rtrunc, arma::vec weights, bool cens, bool trunc, double tol, double zerotol, int maxiter);
RcppExport SEXP _longevity_turnbullem(SEXP tsetsSEXP, SEXP nSEXP, SEXP lcensSEXP, SEXP rcensSEXP, SEXP ltruncSEXP, SEXP rtruncSEXP, SEXP weightsSEXP, SEXP censSEXP, SEXP truncSEXP, SEXP tolSEXP, SEXP zerotolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tsets(tsetsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lcens(lcensSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rcens(rcensSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ltrunc(ltruncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rtrunc(rtruncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type cens(censSEXP);
    Rcpp::traits::input_parameter< bool >::type trunc(truncSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type zerotol(zerotolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(turnbullem(tsets, n, lcens, rcens, ltrunc, rtrunc, weights, cens, trunc, tol, zerotol, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_longevity_turnbull_intervals", (DL_FUNC) &_longevity_turnbull_intervals, 2},
    {"_longevity_censTruncLimits", (DL_FUNC) &_longevity_censTruncLimits, 7},
    {"_longevity_turnbullem", (DL_FUNC) &_longevity_turnbullem, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_longevity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
