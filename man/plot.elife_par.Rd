% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qqplot.R
\name{plot.elife_par}
\alias{plot.elife_par}
\title{Goodness-of-fit plots for parametric models}
\usage{
\method{plot}{elife_par}(
  object,
  plot.type = c("base", "ggplot"),
  which.plot = c("pp", "qq"),
  confint = FALSE,
  plot = TRUE
)
}
\arguments{
\item{object}{a parametric model of class \code{elife_par}}

\item{plot.type}{string, one of \code{base} for base R or \code{ggplot}}

\item{which.plot}{vector of string indicating the plots, among \code{pp} for probability-probability plot, \code{qq} for quantile-quantile plot, \code{erp} for empirically rescaled plot (only for censored data), \code{exp} for exponential quantile-quantile plot or \code{tmd} for Tukey's mean difference plot, which is a variant of the Q-Q plot in which we map the pair \eqn{(x,y)} is mapped to \code{((x+y)/2,y-x)} are detrended}

\item{confint}{logical; if \code{TRUE}, creates uncertainty diagnostic via a parametric bootstrap}

\item{plot}{logical; if \code{TRUE}, creates a plot. Useful for returning \code{ggplot} objects without printing the graphs}
}
\description{
Because of censoring and truncation, the plotting
positions must be adjusted accordingly.
For right-censored data, the methodology is described
in Waller & Turnbull (1992). Only non-censored observations are
displayed, which can create distortion.
}
\details{
For truncated data, we first estimate the distribution function
nonparametrically, \eqn{F_n}. The uniform plotting positions of the data
\deqn{v_i = [F_n(y_i) - F_n(a_i)]/[F_n(b_i) - F_n(a_i)]}.
For probability-probability plots, the empirical quantiles are transformed
using the same transformation, with \eqn{F_n} replaced by the postulated or estimated
distribution function \eqn{F_0}.
For quantile-quantile plots, the plotting positions \eqn{v_i} are mapped back
to the data scale viz. \deqn{F_0^{-1}\{F_0(a_i) + v_i[F_0(b_i) - F_0(a_i)]\}}
When data are truncated, the plotting positions need not be in the same order as the data
}
\examples{
samp <- samp_elife(
 n = 200,
 scale = 2,
 shape = 0.3,
 family = "gomp",
 lower = 0, upper = runif(200, 0, 10),
 type2 = "ltrc")
fitted <- fit_elife(
 time = samp$dat,
 thresh = 0,
 samp$rcens,
 family = "exp",
 export = TRUE)
plot(fitted, plot.type = "ggplot")
# Left- and right-truncated data
samp <- samp_elife(
 n = 200,
 scale = 2,
 shape = 0.3,
 family = "gp",
 lower = ltrunc <- runif(200),
 upper = rtrunc <- ltrunc + runif(200, 0, 10),
 type2 = "ltrt")
fitted <- fit_elife(
 dat = samp,
 thresh = 0,
 ltrunc = ltrunc,
 rtrunc = rtrunc,
 type = "ltrt",
 family = "gp",
 export = TRUE)
plot(fitted, plot.type = "ggplot")
}
