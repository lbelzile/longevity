% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/npecdf.R
\name{np_elife}
\alias{np_elife}
\title{Nonparametric estimation of the survival function}
\usage{
np_elife(
  dat,
  thresh,
  rcens = NULL,
  ltrunc = NULL,
  rtrunc = NULL,
  tol = 1e-12,
  vcov = FALSE
)
}
\arguments{
\item{dat}{vector of \code{n} raw observations}

\item{thresh}{double thresh}

\item{rcens}{logical vector length \code{n}, where \code{rcens} is \code{TRUE} for right-censored observation and \code{FALSE} otherwise.}

\item{ltrunc}{vector of size \code{n} of lower truncation time}

\item{rtrunc}{vector of size \code{n} of upper truncation time}

\item{tol}{double, relative tolerance for convergence of the EM algorithm}

\item{vcov}{logical; should the observed information matrix be computed? Default to \code{FALSE}}
}
\value{
a list with elements
\itemize{
\item{\code{cdf}: }{right-continuous \code{stepfun} object defined by probabilities}
\item{\code{time}: }{unique failure exceedance times defining intervals}
\item{\code{prob}: }{\code{J} vector of probability of failure in interval}
\item{\code{vcov}: }{either \code{NULL} or an \code{J-1} by \code{J-1} covariance matrix for the first components}
\item{\code{niter}: }{number of iterations before EM algorithm convergence from equiprobable}
}
}
\description{
The survival function is obtained through the EM algorithm
described in Turnbull (1976) for left-truncated right-censored
or else doubly truncated observations; censoring is assumed to be
non-informative. The survival function changes only
at the J distinct exceedances \eqn{y_i-u} and truncation points.
}
\note{
This function is a vanilla R implementation of the EM algorithm;
the function \link{npsurv} uses a backbone Cpp implementation
and will be faster for most settings. The function can return
the variance covariance matrix of the \code{J-1} estimated probabilities,
which is computed by inverting the negative hessian of the incomplete
log likelihood.

The method is currently limited to 2500 unique failure time, since
the implementation has a heavy memory footprint of the order O(\eqn{J^2})

The unknown parameters of the model are \eqn{p_j (j=1, \ldots, J)}
subject to the constraint that \eqn{\sum_{j=1}^J p_j=1}.
}
\examples{
set.seed(2021)
n <- 20L
# Create fake data
ltrunc <- pmax(0, runif(n, -0.5, 1))
rtrunc <- runif(n, 6, 10)
dat <- samp_elife(n = n, scale = 1,
               shape = -0.1,
               lower = ltrunc,
               upper = rtrunc,
               family = "gp",
               type = "ltrt")
thresh <- 0
npi <- np_elife(dat = dat, thresh = thresh,
rtrunc = rtrunc, ltrunc = ltrunc, vcov = TRUE)
}
